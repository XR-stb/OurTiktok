// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"OutTiktok/apps/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUsersReq = user.GetUsersReq
	GetUsersRes = user.GetUsersRes
	LoginReq    = user.LoginReq
	LoginRes    = user.LoginRes
	RegisterReq = user.RegisterReq
	RegisterRes = user.RegisterRes
	UserInfo    = user.UserInfo
	UserReq     = user.UserReq
	UserRes     = user.UserRes

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		User(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
		GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersRes, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) User(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.User(ctx, in, opts...)
}

func (m *defaultUser) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersRes, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUsers(ctx, in, opts...)
}
