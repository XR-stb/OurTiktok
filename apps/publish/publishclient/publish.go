// Code generated by goctl. DO NOT EDIT.
// Source: publish.proto

package publishclient

import (
	"context"

	"OutTiktok/apps/publish/publish"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActionReq       = publish.ActionReq
	ActionRes       = publish.ActionRes
	GetVideoIdsReq  = publish.GetVideoIdsReq
	GetVideoIdsRes  = publish.GetVideoIdsRes
	GetVideosReq    = publish.GetVideosReq
	GetVideosRes    = publish.GetVideosRes
	GetWorkCountReq = publish.GetWorkCountReq
	GetWorkCountRes = publish.GetWorkCountRes
	ListReq         = publish.ListReq
	ListRes         = publish.ListRes
	UserInfo        = publish.UserInfo
	Video           = publish.Video

	Publish interface {
		Action(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionRes, error)
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error)
		GetVideos(ctx context.Context, in *GetVideosReq, opts ...grpc.CallOption) (*GetVideosRes, error)
		GetVideoIds(ctx context.Context, in *GetVideoIdsReq, opts ...grpc.CallOption) (*GetVideoIdsRes, error)
		GetWorkCount(ctx context.Context, in *GetWorkCountReq, opts ...grpc.CallOption) (*GetWorkCountRes, error)
	}

	defaultPublish struct {
		cli zrpc.Client
	}
)

func NewPublish(cli zrpc.Client) Publish {
	return &defaultPublish{
		cli: cli,
	}
}

func (m *defaultPublish) Action(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionRes, error) {
	client := publish.NewPublishClient(m.cli.Conn())
	return client.Action(ctx, in, opts...)
}

func (m *defaultPublish) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error) {
	client := publish.NewPublishClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultPublish) GetVideos(ctx context.Context, in *GetVideosReq, opts ...grpc.CallOption) (*GetVideosRes, error) {
	client := publish.NewPublishClient(m.cli.Conn())
	return client.GetVideos(ctx, in, opts...)
}

func (m *defaultPublish) GetVideoIds(ctx context.Context, in *GetVideoIdsReq, opts ...grpc.CallOption) (*GetVideoIdsRes, error) {
	client := publish.NewPublishClient(m.cli.Conn())
	return client.GetVideoIds(ctx, in, opts...)
}

func (m *defaultPublish) GetWorkCount(ctx context.Context, in *GetWorkCountReq, opts ...grpc.CallOption) (*GetWorkCountRes, error) {
	client := publish.NewPublishClient(m.cli.Conn())
	return client.GetWorkCount(ctx, in, opts...)
}
